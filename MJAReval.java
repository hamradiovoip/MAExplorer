/** File: MJAReval.java */
 
import java.awt.*;
import java.lang.*;
import java.io.*;
import java.awt.image.*;
import java.util.*;

/**
 * MAExplorer Open Java API class to access the MJAReval R package. 
 * R is an extensible language and envirnment for statistical computing and
 * graphics. R is Open Source (GNU public license) and is available for
 * download at www.r-project.org.
 *<P>
 * This class's methods contain a command interpreter, and support methods 
 * and data structures to enable you to execute R program .R scripts using
 * client data. 
 * <P>
 * In this MJAReval API, the "client" is MAExplorer, 
 * the "RLORlibr" (R library package) for MAExplorer is "MAERlibr".
 *<p> 
 * It is intended to be used when writing MAEPlugins that need to access the
 * R program to execute .R scripts with client data. This may generate
 * reports and plots (PDF, JPG, PNG, Postscript). Some of these reports may
 * be used to pass the R results back into the client state (Gene Sets, 
 * Filter gene sets, Normalization gene sets, Condition Lists, OCL, etc.).
 *<P>
  * This class evaluates R scripts with data supplied from client via
 * the MJA API. Each R analysis is defined by a R LayOut (RLO). Each RLO
 * is saved in an internal RLO database managed by the mjaReval MJA class.
 * (see class variable definitions and addRLO() method for details on the 
 * RLO). The RLOs specify the evaluation environment for the .R script when
 * evaluated by R. The R program is then run as a separate process using
 * a System.exec()
 *<P>
 * When executed, an R script is allowed to generate multiple output files 
 * that may include the following formats: text, tab-delimited text, PDF, 
 * JPG, etc. There may be also multiple data input files requested by the
 * R script. These are generated by mjaReval class methods as specified by
 * the RLO DB entry. 
 *<P>
 * Note: during R execution, all files are read and written from the
 * {project}/Temp directory, the R current working directory. They may
 * be copied to or from this directory from or to other directories as 
  required.
 *<PRE>
 * 1. data is exported from client to tab-delimited data input files 
 *   {Project}/Temp/. These will then be read by R when your script is 
 *   evaluated.
 * 2. The output of R is saved to any number of files into {project}/Temp
 *    and then moved to {Project}/Report/ where they may then be displayed 
 *    or read by client if required.
 * 3. The .R scripts are shared with all instances of client
 *    and are kept in {client installation}/R/
 * 4. The .rlo files are shared by all instances of client and are kept
 *    in {client installation}/RLO/ directory.
 * 5. The startup script is generated by an mjaReval method and placed in
 *    the {project}/Temp directory where it will be used by a System.exec()
 *    call.
 *</PRE>
 *<B>List of methods available to Plugin-writers</B>
 *<PRE>
 * createNewRLOdatabase() - constructor for initial database allocation
 *
 * setUseSPLUSelseRengineFlag() - specify if use R or S-PLUS statistics engine
 * setRdataTypeDB() - set the export-types (name,type) database.
 * setOfileTypeDB() - set the R output file-types (name,type) database.
 * setR2ClientActionDB() - set the R to client Actions (name,type) database.
 * setProcessBitsDB() - set the Export/Import ProcessBits (name,type) DB.
 *
 * lookupRdataTypeDBmenu() - lookup export-types menu entry by name.
 * lookupRdataTypeDBmenu() - lookup export-types menu entry by value.
 * lookupRdataTypeDBvalue() - lookup export-types value by name.
 * lookupOfileTypeDBmenu() - lookup R output file type menu entry by name.
 * lookupOfileTypeDBmenu() - lookup R output file type menu entry by value.
 * lookupOfileTypeDBvalue() - lookup R output file type value by name.
 * lookupR2ClientActionDBMenu() - lookup R to client Action menu by name
 * lookupR2ClientActionDBMenu() - lookup R to client Action menu by value
 * lookupProcessBitsDBmenu() - lookup Export/Import ProcessBits menu by value
 * lookupR2ClientActionDBvalue() - lookup R to client Action value by name
 *
 * getRdataTypeDBnames() - get the R input file type names
 * getRdataTypeDBmenus() - get the R input file type menus
 * getRdataTypeDBtypes() - get the R input file type values
 * getOfileTypeDBnames() - get the R output file type names 
 * getOfileTypeDBmenus() - get the R output file type menus 
 * getOfileTypeDBtypes() - get the R output file type values
 * getR2ClientActionDBnames() - get the R to client Actions DB names
 * getR2ClientActionDBmenus() - get the R to client Actions DB menus
 * getR2ClientActionDBtypes() - get the R to client Actions DB type values
 * getProcessBitsDBnames() - get Export/Import ProcessBitsDB names
 * getProcessBitsDBmenus() - get Export/Import ProcessBitsDB menu entries
 * getProcessBitsDBvalues() - get Export/Import ProcessBitsDB bit values
 *
 * setRLOreportLoggingFlag() - set RLO Report logging flag for creating subdir 
 * setDbugFlag() set debugging flag to print to stdout if required
 * getNbrAnalyses() - get the number of analyses in the RLO DB
 * getListofRLOscriptNames() - get list of all R script names
 * getListofRLOmenuNames() - get list of all menu names
 * newRLO() - create new empty R LayOut (RLO) instance to the RLO database.
 * addRLO() - add new R LayOut (RLO) instance to the database
 * setRLO() - set R LayOut (RLO) instance to the RLO database.
 * rmvRLO() - remove the RLO from the analyses database
 * clearRLOdb() - clear list of R LayOuts analyses in the database
 *
 * getRLOidByRscriptName() - get current RLO analysis method id by RscriptName
 * getCurrentRLOid() - get current RLO analysis id
 * setCurrentRLO() - set current RLO analysis by id
 * getCurrentRLOmenuName() - get current RLO analysis menu string name
 * getCurrentRLORscriptName() - get current RLO analysis .R script file name
 *
 * getInputDataFileNames() - get current RLO list of input data file names
 * getInputDataTypes() - get current RLO list of input data file types
 *
 * getOutputDataFileNames() - get current RLO list of output data file names
 * getOutputDataTypes() - get current RLO list of output data file types
 *
 * getSetR2ClientFileNames() - get current RLO list of R2Client data file names
 * getSetR2ClientObjNames() - get current RLO list of R2Client object names
 * getSetR2ClientObjTypes() - get current RLO list of R2Client object types  
 *
 * setInputFilesData() - set current RLO list of input data (fileName,dataType)
 * setOutputFilesData() - set current RLO list of output data (fileName,dataType)
 * setR2ClientFilesData() - set cur. RLO list of R2Client (file, obj, type) data
 *
 * getAllProcessBits() - get Process Bits using R_PB_xxxx bits for current RLO
 * setAllProcessBits() - set Process Bits using R_PB_xxxx bits for current RLO
 * isProcessBit() - test Process Bits for current RLO
 * clearProcessBit() - clear specific Process Bit(s) for current RLO
 * setProcessBit() - set specific Process Bit(s) for current RLO
 *
 * getAllGenRbits() - get GenR Bits using R_GENR_xxxx bits for current RLO
 * setAllGenRbits() - set GenR Bits using R_GENR_xxxx bits for current RLO
 * isGenRbit() - test GenR Bits for current RLO
 * clearGenRbit() - clear specific GenR Bit(s) for current RLO
 * setGenRbit() - set specific GenR Bit(s) for current RLO
 *
 * getRLOoutFile() - get the nth Output Data file by out file type
 * getRLOinputFile() - get the nth Input Data file by input file type
 *
 * getRstartupOptions() - get R command line startup options
 * setRstartupOptions() - set R command line startup options
 *
 * getRLOstring() - get prettyprint string for the current RLO
 *
 * setupAllBasePaths() - generate all base paths of directories
 * simpleLookupRprogramPath() - lookup RbinBasePath by analyzing OS env vars & OS name.
 * runRscriptWithR() - compute report string by running R script through R. 
 *
 * getReportBasePath() - get current path of Client Report/ directory 
 * getRscriptBasePath() - get current path of client R/ directory
 * getRLObasePath() - get current path of <client installation>/RLO/  
 * getTempBasePath() - get current path of client Temp/ directory   
 * getRLORlibrBasePath() - get current base path of client RLORlibr/ directory  
 *
 * getStartupRscriptFileName() - get name of batch R startup script file to exec() 
 * getInputRscriptFileName() - get name of .R input script file after eval
 * getFullRunRfilePath() - full path of batch R startup script file after eval
 * getFullRscriptInputPath() - full path of R input script file after eval
 * getFullRoutputFilePath() - get full path of R output file after eval
 * getRreportStr() - get last R report after doing eval of .R script
 *
 * readPermanentRLOdatabase() - read RLO entries from the permanent
 * writePermanentRLOdatabase() - write RLO entries to the permanent
 * readRLOfile() - read RLO by .rlo file name into a new RLO (rloID).
 * writeRLOfile() - write RLO by .rlo file name for the specified RLO (rloID).
 *
 *</PRE>
 *<P>
 * This work was produced by Peter Lemkin of the National Cancer
 * Institute, an agency of the United States Government.  As a work of
 * the United States Government there is no associated copyright.  It is
 * offered as open source software under the Mozilla Public License
 * (version 1.1) subject to the limitations noted in the accompanying
 * LEGAL file. This notice must be included with the code. The client 
 * Mozilla and Legal files are available on http://maexplorer.sourceforge.net/.
 *<P>
 * @author P. Lemkin (NCI), G. Thornwall (SAIC), NCI-Frederick, Frederick, MD
 * @version $Date: 2004/01/13 16:45:03 $   $Revision: 1.45 $
 * @see <A HREF="http://maexplorer.sourceforge.net/">MAExplorer Home</A>
 */
 
public class MJAReval extends MJAbase
{
  /* instance of API */
  private static MaeJavaAPI
    mja;
  
  /** Reval instance */
  private static Reval
    rEval;
 
    
  /**
   * MJAReval() - constructor for client interface to the R program to
   * access client data in a uniform interface.  This Class lets us
   * access the underlying client data structures in a uniform way that
   * hides the complexity. It is designed to be used with client Plugins.
   */
  public MJAReval()
  { /* MJAReval */   
    this.mja= MAExplorer.mja;
    rEval= new Reval(mja, 50 /* maxAnalyses */);
    setRLOreportLoggingFlag(mja.mae.useRLOloggingFlag); 
  } /* MJAReval */
  
  
  /**
   * createNewRLOdatabase() - constructor for initial database allocation
   * @param mja is instance of MaeJavaAPI
   * @param maxAnalyses to set up the database
   */
  private final boolean createNewRLOdatabase(MaeJavaAPI mja, int maxAnalyses)
  { /* createNewRLOdatabase */
    this.mja= mja;
    
    if(rEval==null)
      rEval= new Reval(mja, maxAnalyses); /* only if does not exist */
    
    return(rEval!=null);
  } /* createNewRLOdatabase */  
  
  
  /* -------------------------------------------------------------------*/
  /*  Methods for dyanmic assignment of (input,output,R2Client,Actions) */
  /* -------------------------------------------------------------------*/  
  
  
  /**
   * setUseSPLUSelseRengineFlag() - specify if use R or S-PLUS statistics engine
   * @param useSplusFlag will use S-PLUS if true, else defaults to R
   */
  public final void setUseSPLUSelseRengineFlag(boolean useSplusFlag)
  { /* setUseSPLUSelseRengineFlag */
    rEval.mae.useSPLUSasComputingEngineFlag= useSplusFlag;
    rEval.mae.mbf.miPLGMuseSPLUSasComputingEngine.setState(useSplusFlag);
    rEval.useSPlusFlag= useSplusFlag;
    /* [TODO] check if need to  call to Reval to redo any globals that 
     * need to be changed.
     */
  } /* setUseSPLUSelseRengineFlag */ 
  
  
  /**
   * setRdataTypeDB() - set the export-types (name,menu,type) database.
   * These files are output by the client and read by R.
   * @param names is list of file names output by client and read by R
   * @param menus is list of menu entries
   * @param values is list of corresponding values
   */
  public final void setRdataTypeDB(String names[], String menus[],
                                   int values[])
  { rEval.setRdataTypeDB(names, menus, values); }
  
  
  /**
   * setOfileTypeDB() - set R output file-types (name,menu,type) database.
   * These files are output by R.
   * @param names is list of file names output by R
   * @param menus is list of menu entries
   * @param values is list of corresponding values
   */
  public final void setOfileTypeDB(String names[], String menus[],
                                   int values[])
  { rEval.setOfileTypeDB(names, menus, values);  }
  
  
  /**
   * setR2ClientActionDB() - set R to client Actions (name,menu,type) DB.
   * @param names is list of names of actions
   * @param menus is list of menu entries
   * @param values is list of corresponding type values
   */
  public final void setR2ClientActionDB(String names[], String menus[],
                                        int values[])
  { rEval.setR2ClientActionDB(names, menus, values); }
  
  
  /**
   * setProcessBitsDB() - set the Export/Import ProcessBits 
   *    (name,menu,type) database.
   * @param names is list of names
   * @param menus is list of menu entries
   * @param values is list of corresponding values
   */
  public final void setProcessBitsDB(String names[], String menus[],
                                     int values[])
  { rEval.setProcessBitsDB(names, menus, values); }
  
  /**
   * lookupRdataTypeDBmenu() - lookup export-types menu entry by name.
   * @param name is the file name to lookup
   * @return menu else null if not found
   */
  public final String lookupRdataTypeDBmenu(String name) 
  { return(rEval.lookupRdataTypeDBmenu(name)); }
  
  
  /**
   * lookupRdataTypeDBmenu() - lookup export-types menu entry by value.
   * @param value is the file name to lookup
   * @return menu else null if not found
   */
  public final String lookupRdataTypeDBmenu(int val)
  { return(rEval.lookupRdataTypeDBmenu(val)); }
  
  
  /**
   * lookupRdataTypeDBvalue() - lookup export-types value by name.
   * @param name is the file name to lookup
   * @return value else 0 if not found
   */
  public final int lookupRdataTypeDBvalue(String name)  
  { return(rEval.lookupRdataTypeDBvalue(name)); }
  
  
  /**
   * lookupOfileTypeDBmenu() - lookup R output file type menu entry by name.
   * @param name is the file name to lookup
   * @return menu else null if not found
   */
  public final String lookupOfileTypeDBmenu(String name)
  { return(rEval.lookupOfileTypeDBmenu(name)); }
  
  
  /**
   * lookupOfileTypeDBmenu() - lookup R output file type menu entry by value.
   * @param val is the file name to val
   * @return menu else null if not found
   */
  public final String lookupOfileTypeDBmenu(int val)
  { return(rEval.lookupOfileTypeDBmenu(val)); }
  
  
  /**
   * lookupOfileTypeDBvalue() - lookup R output file type value by name.
   * @param name is the file name to lookup
   * @return value else 0 if not found
   */
  public final int lookupOfileTypeDBvalue(String name)  
  { return(rEval.lookupOfileTypeDBvalue(name)); } 
  
  
  /**
   * lookupR2ClientActionDBMenu() - lookup R to client Action menu by name
   * @param name is the name of entry
   * @return menu else null if not found
   */
  public final String lookupR2ClientActionDBMenu(String name) 
  { return(rEval.lookupR2ClientActionDBMenu(name)); } 
  
  
  /**
   * lookupR2ClientActionDBMenu() - lookup R to client Action menu by value
   * @param value is of the action
   * @return menu else null if not found
   */
  public final String lookupR2ClientActionDBMenu(int val)
  { return(rEval.lookupR2ClientActionDBMenu(val)); }
  
  
  /**
   * lookupProcessBitsDBmenu() - lookup Export/Import ProcessBits menu 
   * by value
   * @param i is ith process bit
   * @param value is of the process bit
   * @return menu else null if not found
   */
  public final String lookupProcessBitsDBmenu(int i, int val)
  { return(rEval.lookupProcessBitsDBmenu(i, val)); }
  
  
  /**
   * lookupR2ClientActionDBvalue() - lookup R to client Action value by name
   * @param name is the name of entry
   * @return menu else 0 if not found
   */
  public final int lookupR2ClientActionDBvalue(String name)
  { return(rEval.lookupR2ClientActionDBvalue(name)); }
  
  
  /**
   * lookupProcessBitsDBvalue() - lookup Export/Import ProcessBits value
   * by name
   * @param name is the name to lookup
   * @return value if found, 0 if not found.
   */
  public final int lookupProcessBitsDBvalue(String name)
  { return(rEval.lookupProcessBitsDBvalue(name)); }
  
  
  /**
   * getRdataTypeDBnames() - get the R input file type names
   * @return list of file names
   */
  public final String[] getRdataTypeDBnames()
  { return(rEval.getRdataTypeDBnames()); }  
  
  
  /**
   * getRdataTypeDBmenus() - get the R input file type menus
   * @return list of menus
   */
  public final String[] getRdataTypeDBmenus()
  { return(rEval.getRdataTypeDBmenus()); }  
  
  
  /**
   * getRdataTypeDBtypes() - get the R input file type values
   * @return list of values
   */
  public final int[] getRdataTypeDBtypes()
  { return(rEval.getRdataTypeDBtypes()); }
  
  
  /**
   * getOfileTypeDBnames() - get the R output file type names 
   * @return list of file names
   */
  public final String[] getOfileTypeDBnames()
  { return(rEval.getOfileTypeDBnames()); } 
  
  
  /**
   * getOfileTypeDBmenus() - get the R output file type menus 
   * @return list of menus
   */
  public final String[] getOfileTypeDBmenus()
  { return(rEval.getOfileTypeDBmenus()); }  
  
  
  /**
   * getOfileTypeDBtypes() - get the R output file type values
   * @return list of values
   */
  public final int[] getOfileTypeDBtypes()
  { return(rEval.getOfileTypeDBtypes()); }
    
  
  /**
   * getR2ClientActionDBnames() - get R to client Actions DB names
   * @return list of names
   */
  public final String[] getR2ClientActionDBnames()
  { return(rEval.getR2ClientActionDBnames()); }
  
  
  /**
   * getR2ClientActionDBmenus() - get R to client Actions DB menus
   * @return list of menus
   */
  public final String[] getR2ClientActionDBmenus()
  { return(rEval.getR2ClientActionDBmenus()); }
  
  
  /**
   * getR2ClientActionDBtypes() - get R to client Actions DB type values
   * @return list of values
   */
  public final int[] getR2ClientActionDBtypes()
  { return(rEval.getR2ClientActionDBtypes()); }
  
  
  /**
   * getProcessBitsDBnames() - get Export/Import ProcessBits DB names
   * @return list of names
   */
  public final String[] getProcessBitsDBnames()
  { return(rEval.getProcessBitsDBnames()); }

  
  /**
   * getProcessBitsDBmenus() - get Export/Import ProcessBits DB menus
   * @return list of menu entries
   */
  public final String[] getProcessBitsDBmenus()
  { return(rEval.getProcessBitsDBmenus()); }
  
  
  /**
   * getProcessBitsDBvalues() - get Export/Import ProcessBits DB values
   * @return list of values
   */
  public final int[] getProcessBitsDBvalues()
  { return(rEval.getProcessBitsDBvalues()); }
  
  
  /* -------------------------------------------------------------- */
  /*                     Misc methods                               */
  /* -------------------------------------------------------------- */
  
  /** 
   * setRLOreportLoggingFlag() - set RLO Report logging flag
   * for creating subdirectory in {project}/Report/{RLOname}-yymmdd.hhmmss/ 
   * to store the RLO output files copied to Report/
   */
  public final void setRLOreportLoggingFlag(boolean flag)
  { rEval.setRLOreportLoggingFlag(flag); }
  
  
  /** 
   * setDbugFlag() set debugging flag to print to stdout if required
   */
  public final void setDbugFlag(boolean flag)
  { rEval.setDbugFlag(flag);} 


  /**
   * getNbrAnalyses() - get the number of analyses in the RLO DB
   * @return # of analyses in the RLO DB
   */
  public final int getNbrAnalyses()
  { return(rEval.getNbrAnalyses()); }
  
  
  /**
   * getListofRLOscriptNames() - get list of all R script names
   * @return list of RLO Rscript names
   */
  public final String[] getListofRLOscriptNames()
  { return(rEval.getListofRLOscriptNames()); }
   
    
  /**
   * getListofRLOmenuNames() - get list of all menuNames
   * @return list of RLO menu names
   */
  public final String[] getListofRLOmenuNames()
  { return(rEval.getListofRLOmenuNames()); }
  
  
  /**
   * newRLO() - create new empty R LayOut (RLO) instance to the RLO database
   * @return the id number
   */
  public final int newRLO()
  { return(rEval.newRLO()); }
  
  
  /**
   * addRLO() - add new R LayOut (RLO) instance to the RLO database.
   * The RLO is a meta-language for specifying the processing interaction
   * between R and client.
   *<P>
   * E.g., the following is an example that exports various types (4) of
   * client data, generates 4 types of output files, and sets the
   * client state from 2 of those files.
   *<PRE>
   * String inFiles[]= { "R-InputFile-XY-classNames.txt",
   *                     "R-InputFile-X-sample-names.txt",
   *                     "R-InputFile-Y-sample-names.txt",
   *                     "R-InputFile-XY-sets-expr.txt" };
   * int inTypes[]= { R_DATA_TYPE_XY_CLASSNAMES,
   *                  R_DATA_TYPE_HP_X_SET_SAMPLENAMES,
   *                  R_DATA_TYPE_HP_Y_SET_SAMPLENAMES,
   *                  R_DATA_TYPE_HP_XY_SETS };
   * int processBits= (R_PB_USE_FILTER | R_PB_SAMPLES_HDR); 
   * int genRbits= (R_GENR_HIST | R_GENR_LOWESS | R_GENR_PLOT);    
   * String outFiles[]= { "R-Stdout.txt", "R-OutputFile.pdf", 
   *                      "R-GeneSet.txt", "R-ConditionList.txt",
   *                      "R-LowessTbl.txt"};
   * int outTypes[]= { R_FILE_TYPE_STDOUT, R_FILE_TYPE_PDF,
   *                   R_FILE_TYPE_TAB_DELIM_TBL,
   *                   R_FILE_TYPE_TAB_DELIM_TBL,
   *                   R_FILE_TYPE_TAB_DELIM_TBL}; 
   * String setR2ClientFiles[]= { "R-GeneSet.txt", "R-ConditionList.txt"};
   * String setR2ClientObjs[]= { "Clustered-Genes", "Similar-Samples" };
   * int setR2ClientType[]= { R_SET_R2Client_GENE_SET, 
   *                          R_SET_R2Client_CONDITION_LIST };
   * String scriptSpecificRoptions= "--vsize=20M";
   *
   *  addRLO( "Analyze HP-XY 'set' expression data", "Plugins:RLOmethods",
   *          "clientAnalyzeXYsets.R",
   *          inFiles, inTypes, 
   *          processBits, genRbits, 
   *          outFiles, outTypes,
   *          setR2ClientFiles, setR2ClientObjs, setR2ClientType,
   *          scriptSpecificRoptions );
   *</PRE>
   * @param menuName text description of the RLO entry
   * @param menuStubName used by client to put RLO menu entry in a 
   *        particular menu.
   * @param RscriptName is the name of the .R file
   * @param inputDataFileNames opt. list of R input data file names
   * @param inputDataTypes corresponding list of R input data file types
   * @param processBits used during eval
   * @param genRbits set during edit by R script GUI
   * @param outputDataFileNames opt. list of R output data file names
   * @param outputDataTypes corresponding list of R output data file types
   * @param setR2ClientFileNames opt. list of file names to set R output data
   *        to client state objects
   * @param setR2ClientObjNames opt. list of client object names to
   *        set R output data to client state objects
   * @param setR2ClientObjType opt. list of client object types
   *        to set R output data to client state objects
   * @param scriptSpecificRoptions
   * @return the id number
   */
  public final int addRLO(String menuName, String menuStubName, 
                          String RscriptName, 
                          String inputDataFileNames[], 
                          int inputDataTypes[],
                          int processBits, int genRbits,
                          String outputDataFileNames[], 
                          int outputDataTypes[],
                          String setR2ClientFileNames[],
                          String setR2ClientObjNames[],
                          int setR2ClientObjTypes[],
                          String scriptSpecificRoptions )
  { /* addRLO */
    return(rEval.addRLO(menuName, menuStubName, RscriptName, 
                        inputDataFileNames, inputDataTypes,
                        processBits, genRbits,
                        outputDataFileNames, outputDataTypes,
                        setR2ClientFileNames, setR2ClientObjNames,
                        setR2ClientObjTypes,
                        scriptSpecificRoptions)
                        );
  } /* addRLO */  
  
  
 /**
  * setRLO() - set R LayOut (RLO) instance to the RLO database.
  * The RLO is a meta-language for specifying the processing interaction
  * between R and client.
  *<P>
  * E.g., the following is an example that exports various types (4) of
  * client data, generates 4 types of output files, and sets the
  * client state from 2 of those files.
  *<PRE>
  * int rloID= 10;
  * String inFiles[]= { "R-InputFile-XY-classNames.txt",
  *                     "R-InputFile-X-sample-names.txt",
  *                     "R-InputFile-Y-sample-names.txt",
  *                     "R-InputFile-XY-sets-expr.txt" };
  * int inTypes[]= { R_DATA_TYPE_XY_CLASSNAMES,
  *                  R_DATA_TYPE_HP_X_SET_SAMPLENAMES,
  *                  R_DATA_TYPE_HP_Y_SET_SAMPLENAMES,
  *                  R_DATA_TYPE_HP_XY_SETS };
  * int processBits= (R_PB_USE_FILTER | R_PB_SAMPLES_HDR);
  * int genRbits= (R_GENR_HIST | R_GENR_LOWESS | R_GENR_PLOT);
  * String outFiles[]= { "R-Stdout.txt", "R-OutputFile.pdf",
  *                      "R-GeneSet.txt", "R-ConditionList.txt",
  *                      "R-LowessTbl.txt"};
  * int outTypes[]= { R_FILE_TYPE_STDOUT, R_FILE_TYPE_PDF,
  *                   R_FILE_TYPE_TAB_DELIM_TBL,
  *                   R_FILE_TYPE_TAB_DELIM_TBL,
  *                   R_FILE_TYPE_TAB_DELIM_TBL};
  * String setR2ClientFiles[]= { "R-GeneSet.txt", "R-ConditionList.txt" };
  * String setR2ClientObjs[]= { "Clustered-Genes", "Similar-Samples" };
  * int setR2ClientType[]= { R_SET_R2Client_GENE_SET, 
  *                          R_SET_R2Client_CONDITION_LIST };
  * String scriptSpecificRoptions= "--vsize=20M";
  *
  *   setRLO(rloID,
  *          "Analyze HP-XY 'set' expression data", "Plugins:RLOmethods",
  *          "clientAnalyzeXYsets.R",
  *          inFiles, inTypes,
  *          processBits, genRbits,
  *          outFiles, outTypes,
  *          setR2ClientFiles, setR2ClientObjs, setR2ClientType,
  *          scriptSpecificRoptions );
  *</PRE>
  * @param rloID is the RLO to assign new data
  * @param menuName text description of the RLO entry
  * @param menuStubName used by client to put RLO menu entry in a 
  *        particular menu.
  * @param RscriptName is the name of the .R file
  * @param inputDataFileNames opt. list of R input data file names
  * @param inputDataTypes corresponding list of R input data file types
  * @param processBits  used during eval
  * @param genRbits used during edit by R script GUI
  * @param outputDataFileNames opt. list of R output data file names
  * @param outputDataTypes corresponding list of R output data file types
  * @param setR2ClientFileNames opt. list of file names to set R output data
  *        to client state objects
  * @param setR2ClientObjNames opt. list of client object names to
  *        set R output data to client state objects
  * @param setR2ClientObjType opt. list of client object types
  *        to set R output data to client state objects
  * @param scriptSpecificRoptions
  * @return true if succeed
  */
  public final boolean setRLO(int rloID,
                              String menuName, String menuStubName, 
                              String RscriptName,
                              String inputDataFileNames[], 
                              int inputDataTypes[],
                              int processBits, int genRbits,
                              String outputDataFileNames[], 
                              int outputDataTypes[],
                              String setR2ClientFileNames[],
                              String setR2ClientObjNames[],
                              int setR2ClientObjTypes[],
                              String scriptSpecificRoptions
                              )
  { /* setRLO */
    return(rEval.setRLO(rloID, menuName, menuStubName, RscriptName, 
                        inputDataFileNames, inputDataTypes,
                        processBits, genRbits,
                        outputDataFileNames, outputDataTypes,
                        setR2ClientFileNames, setR2ClientObjNames,
                        setR2ClientObjTypes,
                        scriptSpecificRoptions) );
  } /* setRLO */
  
   
  /**
   * rmvRLO() - remove the RLO from the analyses database
   * @param rloIdToRemove to remove
   * @return true if removed
   */
  public final boolean rmvRLO(int rloIdToRemove)
  {  return(rEval.rmvRLO(rloIdToRemove)); }
  
  
  /**
   * clearRLOdb() - clear list of R LayOuts analyses in the database
   */
  public final void clearRLOdb()
  { /* clearRLOdb */
    rEval.clearRLOdb();
  } /* clearRLOdb */
  
  
  /**
   * getRLOidByRscriptName() - get the current RLO analysis method id 
   * by RscriptName
   * @param RscriptName to lookup in the database
   * @return current RLO object id, -1 if not found
   */
  public final int getRLOidByRscriptName(String RscriptName)
  { return(rEval.getRLOidByRscriptName(RscriptName)); }
  
  
  /**
   * getCurrentRLOid() - get the current RLO analysis method id
   * @return current RLO object id
   */
  public final int getCurrentRLOid()
  { return(rEval.getCurrentRLO().id); }
  
  
  
  /**
   * setCurrentRLO() - set the current RLO analysis method by id
   * @param analysisNbr to set as the current analysis method
   */
  public final void setCurrentRLO(int analysisNbr)
  { rEval.setCurrentRLO(analysisNbr); }
  
  
  /**
   * getCurrentRLOmenuName() - get the current RLO analysis menu string name
   * @return current RLO analysis menu string name
   */
  public final String getCurrentRLOmenuName()
  { return(rEval.getCurrentRLO().menuName); }
  
  
  /**
   * getCurrentRLOmenuStubName() - get the current RLO analysis menu 
   * stub string name
   * @return current RLO analysis menu stub  string name
   */
  public final String getCurrentRLOmenuStubName()
  { return(rEval.getCurrentRLO().menuStubName); }
 
 
  /**
   * getCurrentRLORscriptName() - get current RLO analysis .R script
   * file name
   * @return current RLO analysis .R script file name
   */
  public final String getCurrentRLORscriptName()
  { return(rEval.getCurrentRLO().RscriptName); }
 
 
  /**
   * getInputDataFileNames() - get current RLO list of input data file names
   * @return current RLO list of output data file names
   */
  public final String[] getInputDataFileNames()
  { return(rEval.getCurrentRLO().inputDataFileNames); }
  
  
  /**
   * getInputDataTypes() - get current RLO list of input data file types
   * @return current RLO list of input data file types
   */
  public final int[] getInputDataTypes()
  { return(rEval.getCurrentRLO().inputDataTypes); }
  
  
  /**
   * getOutputDataFileNames() - get current RLO list of output data
   * file names.
   * @return current RLO list of output data file names
   */
  public final String[] getOutputDataFileNames()
  { return(rEval.getCurrentRLO().outputDataFileNames); }
  
  
  /**
   * getOutputDataTypes() - get current RLO list of output data file types
   * @return current RLO list of output data file types
   */
  public final int[] getOutputDataTypes()
  { return(rEval.getCurrentRLO().outputDataTypes); }
  
  
  /**
   * getSetR2ClientFileNames() - get current RLO list of R2Client data
   * file names. Note the data file is also specified in the output file
   * names.
   * @return current RLO list of R2Client data file names
   */
  public final String[] getSetR2ClientFileNames()
  { return(rEval.getSetR2ClientFileNames()); }
  
  
  /**
   * getSetR2ClientObjNames() - get current RLO list of R2Client 
   * object names
   * @return current RLO list of R2Client  object names
   */
  public final String[] getSetR2ClientObjNames()
  { return(rEval.getSetR2ClientObjNames()); }
  
  
  /**
   * getSetR2ClientObjTypes() - get current RLO list of R2Client object types
   * @return current RLO list of R2Client object types
   */
  public final int[] getSetR2ClientObjTypes()
  { return(rEval.getSetR2ClientObjTypes()); }
 
 
  /**
   * setInputFilesData() - set current RLO list of input data 
   * (fileName,dataType)
   * @param fileNames - list of input files names
   * @param dataTypes - list of input files data types
   * @return true if succeed
   */
  public final boolean setInputFilesData(String fileNames[], int dataTypes[])
  { return(rEval.setInputFilesData(fileNames, dataTypes)); }
  
  
  /**
   * setOutputFilesData() - set current RLO list of output data 
   * (fileName,dataType)
   * @param fileNames - list of input files names
   * @param dataTypes - list of input files data types
   * @return true if succeed
   */
  public final boolean setOutputFilesData(String fileNames[], 
                                          int dataTypes[])
  { return(rEval.setOutputFilesData(fileNames, dataTypes)); }
    
  
  /**
   * setR2ClientActionsData() - set cur. RLO list of R2Client (file,obj,type)
   * Actions data.
   * @param fileNames - list of R2Client file names
   * @param objNames - list of R2Client object names
   * @param objTypes - list of R2Client object types
   * @return true if succeed
   */
  public final boolean setR2ClientActionsData(String fileNames[], 
                                              String objNames[],
                                              int objTypes[] )
  { return(rEval.setR2ClientActionDB(fileNames, objNames, objTypes)); }
  

 /*
  * getAllProcessBits() - get Process Bits  bits for current RLO.
  * @return RLO process bits
  */
  public final int getAllProcessBits()
  { return(rEval.getAllProcessBits()); }
  
  
 /**
  * setAllProcessBits() - set Process Bits bits for current RLO.
  * @param bits to use in set in RLO process bits pattern
  */
  public final void setAllProcessBits(int bits)
  { rEval.setAllProcessBits(bits); }
  
  
 /**
  * isProcessBit() - test Process Bits for current RLO.
  * @param bit to test in RLO process bits pattern
  * @return true it specified bit is set in the process bits
  */
  public final boolean isProcessBit(int bit)
  { return((rEval.getCurrentRLO().processBits & bit)!=0); }
  
  
 /**
  * clearProcessBit() - clear specific Process Bit(s) for current RLO.
  * @param bit to clear in RLO process bits pattern
  * @return true it specified bit is set in the process bits
  */
  public final void clearProcessBit(int bit)
  { 
    if((rEval.getCurrentRLO().processBits & bit)!=0)
      rEval.getCurrentRLO().processBits -= bit;
  }
  
  
 /**
  * setProcessBit() - set specific Process Bit(s) for current RLO.
  * @param bit to clear in RLO process bits pattern
  * @return true it specified bit is set in the process bits
  */
  public final void setProcessBit(int bit)
  { rEval.getCurrentRLO().processBits |= bit; }
  
  
 /**
  * getAllGenRbits() - get GenR Bits using R_GENR_xxxx bits for current RLO.
  * @return RLO GenR Bits
  */
  public final int getAllGenRbits()
  { return(rEval.getCurrentRLO().genRbits); }
  
  
 /**
  * setAllGenRbits() - set GenR Bits using R_GENR_xxxx bits for current RLO.
  * @param bits to use in set in RLO GenR Bits pattern
  */
  public final void setAllGenRbits(int bits)
  { rEval.getCurrentRLO().genRbits= bits; }
  
  
 /**
  * isGenRbit() - test GenR Bits for current RLO.
  * @param bit to test in RLO GenR Bits pattern
  * @return true it specified bit is set in the GenR Bits
  */
  public final boolean isGenRbit(int bit)
  { return((rEval.getCurrentRLO().genRbits & bit)!=0); }
  
  
 /**
  * clearGenRbit() - clear specific GenR Bit(s) for current RLO.
  * @param bit to clear in RLO GenR Bits pattern
  * @return true it specified bit is set in the GenR Bits
  */
  public final void clearGenRbit(int bit)
  {
    if((rEval.getCurrentRLO().genRbits & bit)!=0)
      rEval.getCurrentRLO().genRbits -= bit;
  }
  
  
 /**
  * setGenRbit() - set specific GenR Bit(s) for current RLO.
  * @param bit to clear in RLO GenR Bits pattern
  * @return true it specified bit is set in the GenR Bits
  */
  public final void setGenRbit(int bit)
  { rEval.getCurrentRLO().genRbits |= bit; }
  
    
  /** 
   * getRLOoutFile() get the nth Output Data file by out file type.
   * Search outputDataTypes[] entries in the current RLO analysis
   * instance.
   * @param lookForFileType is one of R_FILE_TYPE_xxxx values
   * @param nth is the nth instance to return (counting from 1 - not 0!)
   * @return file name if found, else null if failed.
   */
   public final String getRLOoutFile(int lookForFileType, int nth)
   { return(rEval.rlo.getRLOoutFile(lookForFileType, nth)); }
   
    
  /** 
   * getRLOinputFile() get the nth Input Data file by input file type.
   * Search inputDataTypes[] entries in the current RLO analysis instance.
   * @param lookForFileType is one of R_FILE_TYPE_xxxx values
   * @param nth is the nth instance to return (counting from 1 - not 0!)
   * @return file name if found, else null if failed.
   */
   public final String getRLOinputFile(int lookForFileType, int nth)
   { return(rEval.rlo.getRLOinputFile(lookForFileType, nth)); }
  
   
   /**
    * getRstartupOptions() - get R command line startup options
    * @return startup option string
    */
   public final String getRstartupOptions()
   { return(rEval.rlo.scriptSpecificRoptions); } 
   
   
   /**
    * setRstartupOptions() - set R command line startup options
    * @param str startup option string
    */
   public final void getRstartupOptions(String str)
   { rEval.rlo.scriptSpecificRoptions= str; }
   
   
   /**
    * getRLOstring() - get prettyprint string for the current RLO
    * @param optGenRbitsStr optional genRbits representation computed
    *        elsewhere.
    * @return prettyprint string for the current RLO
    */
   public final String getRLOstring(String optGenRbitsStr)
   { return( rEval.cvRLO2string(getCurrentRLOid(), null, optGenRbitsStr)); }
   
 
  /**
   * setupAllBasePaths() - generate all base paths of directories
   * <PRE>
   * 1. RbinBasePath is the executable bin directory for 
   *    running R in <R installation>,
   * 2. reportBasePath for saving reports in {project}/Report/, 
   * 3. RscriptBasePath is the {client installation}/R/
   *    for .R scripts, 
   * 4. tempBasePath is the {project}/Temp/ directory used for 
   *    R data input,
   * 5. clientRlibrBasePath is  "<Client installation>/lib"
   *    dir where R project {RLORlibr}/ directory lives   
   </PRE>
   * @param clientPrjPath is the client project base path. If this is null,
   *        then it uses the current client project path.
   * @return true if succeed
   * @see #setupRbinPath
   */
   public final boolean setupAllBasePaths(String clientPrjPath)
   { /* setupAllBasePaths */
     if(clientPrjPath==null)
       clientPrjPath= mae.mja.mjaProperty.getMaeCurProjectPath();
     return(rEval.setupAllBasePaths(clientPrjPath));
   } /* setupAllBasePaths */
     
   
  /**
   * simpleLookupRprogramPath() - lookup RbinBasePath by analyzing OS env
   * vars and OS name.
   * @return R bin path, else null if failed to find it in the obvious places
   */
  static String simpleLookupRprogramPath()
  { return(rEval.simpleLookupRprogramPath()); }
  
   
  /**
   * runRscriptWithR() - compute report string by running R script through
   * the R program. 
   * We eval the script after prepping required data into Temp/
   * for the curAnalysis by exec'ing an R process. After it completes, 
   * we read the output files from Report/ required by the
   * analyses[curAnalysis] specification.
   * @return results of running R script
   */
  public final String runRscriptWithR()
  { return(rEval.runRscriptWithR()); }
  
 
  /* --------------------------------------------------- */
  /* File names and paths                                */
  /* --------------------------------------------------- */
        
  /** 
   * getReportBasePath() - get current path of client <project>/Report/
   * @return path
   */
   public final String getReportBasePath()
   {
     if(rEval.useRLOloggingFlag && rEval.timeStampReportDir!=null &&
        rEval.timeStampReportDir.length()>0)    
       return(rEval.reportBasePath+rEval.timeStampReportDir);
     else
       return(rEval.reportBasePath);
   }
  
   
  /** 
   * getRscriptBasePath() - get current path of <client installation>/R/ 
   * @return path 
   */
   public final String getRscriptBasePath()
   { return(rEval.RscriptBasePath); }
  
  
  /** 
   * getRLObasePath() - get current path of <client installation>/RLO/ 
   * @return path 
   */
   public final String getRLObasePath()
   { return(rEval.RLObasePath); }  
  
  
  /** 
   * getTempBasePath() - get current path of client  <project>/Temp/ 
   * @return path 
   */
   public final String getTempBasePath()
   { return(rEval.tempBasePath); }  
  
  
  /** 
   * getRLORlibrBasePath() - get current base path of client RLORibr/ 
   * directory lives in "{installation directory}/".
   * @return path
   */
   public final String getRLORlibrBasePath()
   { return(rEval.clientRlibrBasePath); }
  
   
  /** 
   * getStartupRscriptFileName() - get name of batch R startup script file 
   * to exec() by the OS after file setup
   * @return script file name
   */
   public final String getStartupRscriptFileName()
   { return (rEval.startupRscriptFileName); }
  
  
  /** 
   * getInputRscriptFileName() - get current name of .R input script file
   */
   public final String getInputRscriptFileName()
   { return(rEval.getCurrentRLO().RscriptName); }
   
   
  /** 
   * getFullRunRfilePath() - full path of batch R startup script file  
   * after file setup
   */
   public final String getFullRunRfilePath()
   { return(rEval.fullRunRfilePath); }
   
   
  /** 
   * getFullRscriptInputPath() - full path of R input script file after
   * file setup
   * @return path
   */
   public final String getFullRscriptInputPath()
   { return(rEval.fullRscriptInputPath); }
      
   
  /** 
   * getFullRoutputFilePath() - get full path of R output file  after 
   * file setup
   * @return path
   */
   public final String getFullRoutputFilePath()
   { return(rEval.fullRoutputFilePath); }
   
   
  /** 
   * getRreportStr() - get R report after doing eval of .R script 
   * after file setup
   * @return path
   */
   public final String getRreportStr()
   { return(rEval.rReport); }
   
  
  /**
   * readPermanentRLOdatabase() - read RLO entries from the permanent
   * <client installation>/RLO/ database.
   * @param loadDemoRLOsFlag to not read demo databases 
   * @return true if succeed
   */
  public final boolean readPermanentRLOdatabase(boolean loadDemoRLOsFlag)
  { return(rEval.readPermanentRLOdatabase(loadDemoRLOsFlag)); }
  
  
  /**
   * writePermanentRLOdatabase() - write RLO entries to the permanent
   * <client installation>/RLO/ database. 
   * Note: it does NOT write demo databases with genRbit R_GENR_DEMO set.
   * i.e., the genRbit word is 0.
   * @return true if succeed
   */
  public final boolean writePermanentRLOdatabase()
  { return(rEval.writePermanentRLOdatabase()); } 
  
  
  /**
   * readRLOfile() - read RLO by .rlo file name into a new RLO (rloID).
   * The file resides in {Client installation}/RLO/*.rlo file 
   * @param rloFileName full path file name for .rlo file
   * @param loadDemoRLOsFlag if want to force loading the Demo RLO 
   * @return the new RLO id generated by doing an addRLO(), else -1 if failed
   */
  public final int readRLOfile(String rloFileName, boolean loadDemoRLOsFlag)
  { return( rEval.readRLOfile(rloFileName,loadDemoRLOsFlag));}  
  
  
  /**
   * writeRLOfile() - write RLO by .rlo file name for the specified RLO 
   * (rloID). The file resides in the
   * {Client installation}/RLO/{rScriptName}.rlo file 
   * @param rloBasePath is the base path of the RLO/ directory
   * @param rloID to save as .rlo file
   * @return true if succeed
   */
  public final boolean writeRLOfile(String rloBasePath, int rloID)
  { return(rEval.writeRLOfile(rloBasePath, rloID)); }
  
     
} /* end of class MJAReval */

