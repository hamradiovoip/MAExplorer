/** File: SpotFeatures.java */

import java.awt.*;
import java.awt.image.*;

/**
 * The SpotFeatures class and methods to get spot feature String information.
 * This includes gene clone ID, gene name, genomic id info, GIPO address, plate
 * address, normalized intensity data, ratios, etc.
 * <P>
 * This work was produced by Peter Lemkin of the National Cancer
 * Institute, an agency of the United States Government.  As a work of
 * the United States Government there is no associated copyright.  It is
 * offered as open source software under the Mozilla Public License
 * (version 1.1) subject to the limitations noted in the accompanying
 * LEGAL file. This notice must be included with the code. The MAExplorer 
 * Mozilla and Legal files are available on http://maexplorer.sourceforge.net/.
 *<P>
 * @author P. Lemkin (NCI), G. Thornwall (SAIC), NCI-Frederick, Frederick, MD
 * @version $Date: 2003/11/24 21:21:46 $   $Revision: 1.10 $
 * @see <A HREF="http://maexplorer.sourceforge.net/">MAExplorer Home</A>
*/

class SpotFeatures
{
  /** link to global MAExplorer instance */
  private static MAExplorer
    mae;                        
  /** link to global Maps instance */
  private static Maps
    map;                        
  /** link to global instance */
  private static CompositeDatabase
    cdb;  
  /** link to global instance of Config */
  private static Config
    cfg;                             
    
  /** lookup corresponding plate */
  String
    plate;
  /** lookup corresponding plate_row */
  String
    plate_row;    
  /** lookup corresponding plate_col */
  String
    plate_col;    
  /** lookup master Gene identifier */
  String
    masterID;    
  /** lookup LocusLink LocusID */
  String
    LocusID;  
  /** lookup "Unigene_ID" name */
  String    
    Unigene_ID;  
  /** lookup I.M.A.G.E. Clone Id */
  String
    cloneID;
  /** lookup dbEST id 3'*/
  String
    dbESTid3;    
  /** lookup dbEST id 5'*/
  String
    dbESTid5;    
  /** lookup GenBank Acc */
  String
    GenBankAcc;    
  /** lookup GenBank Acc 3' */
  String
    GenBankAcc3;    
  /** lookup GenBank Acc 5' */
  String
    GenBankAcc5;
  /** lookup SwissProtID */
  String    
    SwissProt;  		
  /** lookup "Gene_Name" */
  String    
    geneName;
  /** lookup "UGclusterName" name */
  String    
    UGclusterName;                    
  /** lookup "Gene_Class" */
  String    
    geneClass;                  
	
  /** Strings generated by getSpotFeatures() */
  static String
    xygStr= "",
    featuresStr= "",
    genomicDataStr= "";
    
  
  
  /**
   * SpotFeatures() - constructor
   * @param mae is instance of MAExplorer
   */
  SpotFeatures(MAExplorer mae)
  { /*SpotFeatures*/
    this.mae= mae;
    map= mae.mp;
    cdb= mae.cdb;
    cfg= mae.cfg;
    
    /* Init defaults */
    plate= "-";
    plate_row= "-";
    plate_col= "-";
    cloneID= "-";
    Unigene_ID= "-";
    LocusID= "-";
    dbESTid3= "-";
    dbESTid5= "-";
    GenBankAcc= "-";
    GenBankAcc3= "-";
    GenBankAcc5= "-";
    SwissProt= "-";
    geneName= "-";
    UGclusterName= "-";
    geneClass= "-";
  } /*SpotFeatures*/
  
  
  /**
   * getSpotMeasurementStr() - return pretty-print spot measurement string.
   * This includes state dependent reporting of x,y,grayvalue.
   * This method will generate different strings depending on various
   * state settings including normalization, single or sets of HP data,
   * Intensity or ratio data, etc.
   * @param gid is the Grid Index (GID) of spot to report
   * @param ms sample being tested to which the xy spot applies
   * @return pretty-print string for data for the point xy in sample ms
   * @see GridCoords#cvtGID2str
   * @see HPxyData#updateDataAndStat
   * @see MaHybridSample#getDataByGID
   * @see Util#cvf2s
   */
  String getSpotMeasurementStr(int gid, MaHybridSample ms)
  { /* getSpotMeasurementStr */
    if(gid==-1 || ms==null)
      return("");
    
    /* [1] Lookup gene (i.e. GID) coords if close to spot */
    int
      gidG= map.gidToGangGid[gid],
      mid= map.gid2mid[gid];
    MaHybridSample
      msR= ms,
      msX= mae.msX,
      msY= mae.msY;
    Point
      xy = ms.xyCQ[gid],
      pGang= ms.xyCQ[gidG];
    int
      x= xy.x,
      y= xy.y;
    boolean
      setHPXflag= mae.dwPI.setHPXflag,
      isXY_pValue= (mae.plotImageMode==mae.PLOT_PSEUDO_HP_XY_P_VALUE_IMG),
      isEP_CVvalue= (mae.plotImageMode==mae.PLOT_PSEUDO_HP_EP_CV_VALUE_IMG),
      showAsCy5OverCy5Flag= (mae.plotImageMode==mae.PLOT_PSEUDO_F1F2_RYG_IMG),
      isRatioXYflag= (mae.plotImageMode==mae.PLOT_PSEUDO_HP_XY_IMG ||
                      mae.plotImageMode==mae.PLOT_PSEUDO_HP_XY_RYG_IMG);
    String
      maCoords= mae.grcd.cvtGID2str(gid, false /* useFieldNameFlag */),
      sf1= mae.cfg.fluoresLbl1,
      sf2= mae.cfg.fluoresLbl2;
    
    if(mae.useCy5OverCy3Flag)
    { /* flip Cy3/Cy5 to Cy5/Cy3 */
      String sTmp= sf1;
      sf1= sf2;
      sf2= sTmp;
    }
    String
     sBkgrdTick= (mae.bkgdCorrectFlag) ? "'" : "",
     cy3Cy5Data= null,           /* Ch3 and Cy5 channel data */
     changeStr= null;            /* either ratios "X/Y" or "F1/F2"
                                  * or zscore "X-Y" or "F1-F2" */
    int
      f= map.gid2fgrc[gid].f,
      g= map.gid2fgrc[gid].g,
      r= map.gid2fgrc[gid].r,
      c= map.gid2fgrc[gid].c,
      fGang= (f==1) ? 2 : 1,
      maxPrecision= 7,            /* maximum precision allowed */
      cngStrPrecision= 5;         /* cvd2s() precision for changeData
                                   * add more precision if required*/
    float
      f1Data= 0.0F,               /* cy3 channel */
      f2Data= 0.0F,               /* cy5 channel */
      totBC= 0.0F,                /* tot - bkgrd */
      totGBC= 0.0F;               /* totG - bkgrdG */

    /* if using Zscore normalization, then use Zdiff=(data1-data2)
     * else use ratio= (data1/data2).
     */
    double
     changeData1,
     changeData2,
     changeData;
    
    /* [2] If valid spot, then get data from database depending
     * on whether it is single HP, or sets of HP-X/-Y mode.
     */
    if(mae.useHPxySetDataFlag)
    { /* compute HP-X/-Y 'set' data message */
      HPxyData hpxy= cdb.hpXYdata;
      String s;
      if(!hpxy.updateDataAndStat(mid))
        return("");
      
      changeData= (mae.isZscoreFlag)
                    ? (hpxy.mnXdata-hpxy.mnYdata) /* Zdiff */
                    : hpxy.mnXdata/hpxy.mnYdata;  /* ratio */
      cngStrPrecision= (Math.abs(changeData)<0.0001) ? maxPrecision : 5;
      changeStr= (mae.isZscoreFlag) ? "(mnX-mnY)" : "mnX/mnY";
      if(isRatioXYflag || mae.dualXYpseudoPlotFlag || isXY_pValue)
      { /* X and Y 'sets' */
        s= maCoords +  "HP-XY"+sBkgrdTick+" 'sets':";
        if(isXY_pValue)
        { /* add the pValue for X, Y sets */
          Gene gene= map.midStaticCL.mList[mid];
          if(gene!=null)
            s += " pValue="+Util.cvf2s(gene.pValue,4);
        }
        s += " mn(X,Y)=(" + Util.cvf2s(hpxy.mnXdata,3) + "," +
             Util.cvf2s(hpxy.mnYdata,3) +
             ") "+changeStr+"=" + Util.cvd2s(changeData,cngStrPrecision) +
             " SD(X,Y)=(" + Util.cvf2s(hpxy.stdDevXdata,3) + "," +
             Util.cvf2s(hpxy.stdDevYdata,3) +
             ") CV(X,Y)=(" + Util.cvf2s(hpxy.cvXdata,3) + "," +
             Util.cvf2s(hpxy.cvYdata,3) +
             ") n(X,Y)=("+ hpxy.nX +"," + hpxy.nY + ")";
      }
      else if(isEP_CVvalue)
      { /* HP-EP list CV  */
        s= maCoords +  "HP-EP"+sBkgrdTick+" 'list':";
        if(isXY_pValue)
        { /* add the CV value for HP-EP list*/
          Gene gene= map.midStaticCL.mList[mid];
          if(gene!=null)
            s += " CV="+Util.cvf2s(gene.pValue,4);
        }
        s += " mn(EP)=" + Util.cvf2s(hpxy.mnEdata,3) + 
             " "+changeStr+"=" + Util.cvd2s(changeData,cngStrPrecision) +
             " SD(EP)=" + Util.cvf2s(hpxy.stdDevEdata,3) +
             " CV(EP)=" + Util.cvf2s(hpxy.cvEdata,3) +
             " n(EP)="+ hpxy.nE;
      }
      else
      { /* single mean of HP-X or HP-Y set */
        float
          mn= (setHPXflag) ? hpxy.mnXdata : hpxy.mnYdata,
          sd= (setHPXflag) ? hpxy.stdDevXdata : hpxy.stdDevYdata,
          cv= (setHPXflag) ? hpxy.cvXdata : hpxy.cvYdata;
        int n= (setHPXflag) ? hpxy.nX : hpxy.nY;
        String hpSetname= ((setHPXflag) ? "HP-X" : "HP-Y")+sBkgrdTick;
        
        s= maCoords + hpSetname + " 'set'" +
        " mean=" + Util.cvf2s(mn,3) +
        " stdDev=" + Util.cvf2s(sd,3) +
        " CV=" + Util.cvf2s(cv,3) +
        " n="+ n;
      }
      s += ", ("+mae.normNameDisp+")";  /* add normalization method */
      return(s);
    } /* compute HP-X/-Y 'set' data message */
    
    /* [2.1] Single samples X/Y data */
    else if(isRatioXYflag)
    { /* compute HP-X/-Y single sample data message */
      float
        tot1BCX, tot2BCX,
        tot1BCY, tot2BCY;
      String
        s,
        s1,
        s2= "",
        r1,
        r2= "";
      
      changeStr= ((mae.isZscoreFlag) ? "X-Y" : "X/Y")+sBkgrdTick;
      
      if(mae.cfg.maxFIELDS>1)
      { /* hasreplicate spots */
        tot1BCX= msX.getDataByGID(gid, mae.useRatioDataFlag, ms.DATA_F1TOT);
        tot2BCX= msX.getDataByGID(gid, mae.useRatioDataFlag, ms.DATA_F2TOT);
        tot1BCY= msY.getDataByGID(gid, mae.useRatioDataFlag, ms.DATA_F1TOT);
        tot2BCY= msY.getDataByGID(gid, mae.useRatioDataFlag, ms.DATA_F2TOT);
        float
          mnX= (tot1BCX+tot2BCX)/2,
          mnY= (tot1BCY+tot2BCY)/2;
          changeData1= (mae.isZscoreFlag) ? tot1BCX-tot1BCY : tot1BCX/tot1BCY;
          changeData2= (mae.isZscoreFlag) ? tot2BCX-tot2BCY : tot2BCX/tot2BCY;
          changeData= (mae.isZscoreFlag) ? (mnX)-(mnY) : (mnX)/(mnY);
        
        cngStrPrecision= (Math.abs(changeData)<0.0001) ? maxPrecision : 5;
        s1= " mn(X,Y)=(" + Util.cvf2s(mnX,3) + "," + Util.cvf2s(mnY,3);
        r1= ") ("+changeStr+")("+sf1+","+sf2+",mean)=(" +
            Util.cvd2s(changeData1,5);
        r2= "," + Util.cvd2s(changeData2,5)+ "," +
            Util.cvd2s(changeData,cngStrPrecision)+")";
      }
      else
      { /* use single spot or ratio data */
        tot1BCX= msX.getDataByGID(gid, mae.useRatioDataFlag, ms.DATA_F1TOT);
        tot1BCY= msY.getDataByGID(gid, mae.useRatioDataFlag, ms.DATA_F1TOT);
        s1= " (X,Y)=(" + Util.cvf2s(tot1BCX,3) + "," + Util.cvf2s(tot1BCY,3);
        changeData1= (mae.isZscoreFlag) ? tot1BCX-tot1BCY : tot1BCX/tot1BCY;
        cngStrPrecision= (Math.abs(changeData1)<0.0001) ? maxPrecision : 5;
        r1= ") "+changeStr+"=" + Util.cvd2s(changeData1,cngStrPrecision);
      }
      
      s= maCoords + "HP-XY"+sBkgrdTick+":"+s1+s2+r1+r2 +
         ", ("+mae.normNameDisp+")";   /* add normalization method */
      return(s);
    } /* compute HP-X/-Y single sample data message */
    
    /* [2.2] Single HP sample data */
    else
    { /* get precomputed spot quant values */
      int
        type1,
        type2,
        gidU= gid;
      if(mae.dualXYpseudoPlotFlag)
      {
        type1= ms.DATA_MEAN_F1F2TOT;
        type2= ms.DATA_MEAN_F1F2TOT;
        if(gidU<map.maxGenes)
        {
          msR= msX;
        }
        else
        {
          msR= msY;
          gidU= map.gidToGangGid[gid];
        }
      }
      else
      {  /* get it from the same sample */
        msX= ms;
        msY= ms;
        type1= ms.DATA_F1TOT;
        type2= ms.DATA_F2TOT;
        gidU= gid;
      }
      
      if(mae.cfg.maxFIELDS>1)
      { /* has replicate spots */
        totBC= msX.getDataByGID(gid, mae.useRatioDataFlag, type1);
        totGBC= msY.getDataByGID(gid, mae.useRatioDataFlag, type2);
      }
      else
      { /* use single spot or ratio data */
        int
        type= (mae.useRatioDataFlag) ? msR.DATA_RATIO_F1F2TOT : type1;
        
        f1Data= msR.getDataByGID(gid, false, ms.DATA_F1TOT);
        f2Data= msR.getDataByGID(gid, false, ms.DATA_F2TOT);
        if(mae.ratioMedianCorrectionFlag)
          f1Data= f1Data/msR.ratioMedianScale; /* swap it */
        cy3Cy5Data= ", "+sf1+"="+Util.cvf2s(f1Data,3)+
                    ", "+sf2+"="+Util.cvf2s(f2Data,3);
        if(showAsCy5OverCy5Flag)
        { /* overide the ratio Cy5/Cy3 not Cy3/Cy5 */
          /* swap since Cy5/Cy3 is Red/Green conventions*/
          cy3Cy5Data= ", "+sf2+sBkgrdTick+"="+Util.cvf2s(f2Data,3)+
                      ", "+sf1+sBkgrdTick+"="+Util.cvf2s(f1Data,3);
          sf2= mae.cfg.fluoresLbl1;
          sf1= mae.cfg.fluoresLbl2;
          totBC= (f1Data!=0.0F) ? (f2Data/f1Data) : 0.0F;
        }
        else
          totBC= msR.getDataByGID(gid, mae.useRatioDataFlag, type);
        totGBC= 0;
      }
      
      /* otherwise, they are out of luck... zero data... */
    } /* get precomputed spot quant values */
    
    
    /* [3] Use precomputed values if is on a gene spot. */
    String
      s= maCoords,
      sF= "",
      sFG= "",
      quant= (mae.useRatioDataFlag)
                ? (sf1+"/"+sf2) /* ie. "Cy3/Cy5" */
                : ((isRatioXYflag)
                    ? ((mae.isZscoreFlag)
                         ? "(HP-X - HP-Y)" : "HP-X/HP-Y")
                         : "intensity"),
      sIntensity= quant+sBkgrdTick;
    
    if(f!=1)
    {
      String sTmp= sf1;
      sf1= sf2;
      sf2= sTmp;
    }
    
    if(mae.dualXYpseudoPlotFlag)
    {
      sF= "[X]";
      sFG= "[Y]";
      changeStr= (mae.isZscoreFlag) ? ", X-Y=" : ", X/Y=";
    }
    else if(mae.gangSpotFlag)
    {
      sF= "["+sf1+"]";
      sFG= "["+sf2+"]";
      changeStr= (mae.isZscoreFlag)
                    ? ", "+sf1+"-"+sf2+"=" 
                    : ", "+sf1+"/"+sf2+"=";
    }
    
    /* Could use (x,y) coordinates - get from .quant data */
    //if(!mae.gangSpotFlag)
    //  s += "Img xy=("+x+","+y+"), ";  /* since extra space */
    
    s += sIntensity+sF+"=";
    s += Util.cvf2s(totBC,4);
    
    if(cy3Cy5Data!=null)
      s += cy3Cy5Data;
    
    if(mae.gangSpotFlag || mae.dualXYpseudoPlotFlag)
    { /* add on gang measurements */
      if(f==1)
        changeData= (double)((mae.isZscoreFlag)
                               ? (totBC-totGBC) : (totBC/totGBC));
      else
        changeData= (double)((mae.isZscoreFlag)
                               ? (totGBC-totBC) : (totGBC/totBC));
        cngStrPrecision= (Math.abs(changeData)<0.0001) ? maxPrecision : 5;
        s += ", "+sIntensity+sFG+"=";
        s += mae.util.cvf2s(totGBC,4);
        s += changeStr + Util.cvd2s(changeData,cngStrPrecision);
    } /* add on gang measurements */
    
    if(mae.useKmeansClusterCntsDispFlag)
    {
      Gene gene= map.midStaticCL.mList[mid];
      if(gene!=null)
      {
        int cNbr= gene.clusterNodeNbr;
        if(cNbr>0)
          s += ", cluster#=" + cNbr;
      }
    }
    
    s += ", ("+mae.normNameDisp+")";   /* add normalization method */
    
    return(s);
  } /* getSpotMeasurementStr */
  
  
  /**
   * getXYG() - return pretty-print string for status of x,y,grayvalue string.
   * This method will generate different strings depending on various
   * state settings including normalization, single or sets of HP data,
   * Intensity or ratio data, etc.
   * @param xy is the coordinates close to spot being requested
   * @param ms sample being tested to which the xy spot applies
   * @return pretty-print string for data for the point xy in sample ms
   * @see CompositeDatabase#lookupHPcoords
   * @see ScrollableImageCanvas#setObjState
   * @see #getSpotMeasurementStr
   */
  String getXYG(Point xy, MaHybridSample ms)
  { /* getXYG */
    int
      x= xy.x,
      y= xy.y;
    
    /* [1] Lookup gene (i.e. GID) coords if close to spot.
     * Note: this sets
     * ms.obj(Field,Grid,Row,Col,X,Y,MID,GID,GIDG).
     */
    String maCoords= cdb.lookupHPcoords(x,y, mae.spotRad, false,ms);
    int gid= cdb.objGID;
    if(!cdb.isValidObjFlag || gid==-1)
      return("");                        /* not a valid spot */
    
    String sR= getSpotMeasurementStr(gid, ms);
    
    /* [2] If latching, move the green (blue) circle to over the spot
     * so latch image onto the better image coordinate estimate.
     */
    if(cdb.objX>0 && cdb.objY>0)
      mae.is.siCanvas.setObjState(ms,cdb.objX, cdb.objY);
    
    return(sR);
  } /* getXYG */
  
  
  /**
   * getSpotFeaturesLine() - get spot coords and features associated with spot gid.
   * @param gid is the Grid Index (GID) of spot to report
   * @param ms sample being tested to which the xy spot applies
   * @return spot features string otherwise "" if no spot specified.
   * @see Gene#lookupIDbyName
   * @see #getPlate
   * @see #setGenomicData
   */
  String getSpotFeaturesLine(int gid)
  { /* getSpotFeaturesLine */
    String sf= "";
    
    /* get the rest of the features */
    /* Read the GenBank associated data into mae.rg globals */
    setGenomicData(gid);
    
    if(cloneID!=null && cloneID.length()>0)
      sf += "CloneID: " + cloneID;
    
    if(dbESTid3!=null && dbESTid3.length()>0 && !dbESTid3.equals("-"))
      sf += ((sf.length()==0) ? "" : ", ") + "dbEST3': " + dbESTid3;
    else if(dbESTid5!=null && dbESTid5.length()>0 &&!dbESTid5.equals("-"))
      sf += ((sf.length()==0) ? "" : ", ") + "dbEST5': " + dbESTid5;
      
    if(GenBankAcc!=null && GenBankAcc.length()>0 && !GenBankAcc.equals("-"))
      sf += ((sf.length()==0) ? "" : ", ") + "GenBank: " + GenBankAcc;
    else if(GenBankAcc3!=null && GenBankAcc3.length()>0 && !GenBankAcc3.equals("-"))
      sf += ((sf.length()==0) ? "" : ", ") + "GenBank 3': " + GenBankAcc3;
    else if(GenBankAcc5!=null && GenBankAcc5.length()>0 && !GenBankAcc5.equals("-"))
      sf += ((sf.length()==0) ? "" : ", ") + "GenBank 5': " + GenBankAcc5;
        
    if(LocusID!=null && LocusID.length()>0 && !LocusID.equals("-"))
      sf += ((sf.length()==0) ? "" : ", ") + "LocusID: " + LocusID;
          
    if(UGclusterName!=null && UGclusterName.length()>0 &&
       !UGclusterName.equals("-"))
      sf += ((sf.length()==0) ? "" : ", ") + "UGclusterName: " + UGclusterName;
            
    if(SwissProt!=null && SwissProt.length()>0 && !SwissProt.equals("-"))
      sf += ((sf.length()==0) ? "" : ", ") + "SwissProt: " + SwissProt;
              
      /* Get additional genomic identifiers from GIPO table */
      if(cfg.nGenomicMenus>0)
      { /* see if it is in the list of Genomic databases */
        Gene gene= map.gidStaticCL.mList[gid];
        if(gene!=null)
          for(int i=0;i<cfg.nGenomicMenus;i++)
          { /* found the active one build the URL */
            String sID= gene.lookupIDbyName(cfg.sGenomicIDreq[i]);
            if(sID!=null && sID.length()>0 && !cfg.sGenomicMenu[i].equals("-"))
              sf += ((sf.length()==0) ? "" : ", ") + cfg.sGenomicMenu[i] + ": " + sID;
          }
      } /* see if it is in the list of Genomic databases */
      
      sf += getPlate(gid);
      
      return(sf);
  } /*getSpotFeaturesLine*/
  
  
  /**
   * getSpotFeatures() - get spot coords and features associated with spot at (x,y)
   * @param xy is the pseudoarray image coordinates close to spot being requested
   * @param ms sample being tested to which the xy spot applies
   * @return spot features string otherwise "" if no actual spot was specified.
   * @see CompositeDatabase#lookupHPcoords
   * @see #getSpotFeaturesLine
   */
  String getSpotFeatures(Point xy, MaHybridSample ms)
  { /*getSpotFeatures*/
    int
      x= xy.x,
      y= xy.y;
    
    /* Test if outside of image */
    if(xy.x < 0 || xy.x >= mae.canvasHSize ||
       xy.y < 0 || xy.y >= mae.canvasVSize )
    { /* latch on to image edges */
      x= Math.min(mae.canvasHSize-1,Math.max(0,x));
      y= Math.min(mae.canvasVSize-1,Math.max(0,y));
    }
    
    String
      sf= "",
      maCoords= cdb.lookupHPcoords(x,y,mae.spotRad,false,ms);
    int gid= cdb.objGID;
    
    sf= getSpotFeaturesLine(gid);
    
    return(sf);
  } /*getSpotFeatures*/
  
  
  /**
   * getSpotGenomicLine() - get additional Genomic name features by GID
   * if they exist. These include GeneName, UniGeneName, GeneClass, ...
   * @param gid is the Grid Index (GID) of spot to report
   * @return spot genomic data otherwise "" if no actual spot was specified.
   * @see #setGenomicData
   */
  String getSpotGenomicLine(int gid)
  { /* getSpotGenomicLine*/
    String sf= "";
    
    setGenomicData(gid);
    
    if(geneName!=null && geneName.length()>0)
      sf += "GeneName: " + geneName;
    if(UGclusterName!=null && UGclusterName.length()>0)
      sf += ((sf.length()==0)
               ? ""
               : ", ") + "UGclusterName:" + UGclusterName + " ";
      if(geneClass!=null && geneClass.length()>0)
        sf += ((sf.length()==0)
                 ? ""
                 : ", ") + "GeneClass:" + geneClass + " ";
        
        return(sf);
  } /* getSpotGenomicLine*/
  
  
  /**
   * getSpotGenomicData() - get additional genomic name features by
   * (x,y) coordindate of current spot for sample if the features exist.
   * These include: GeneName, UGclusterName, GeneClass, ...
   * @param xy is the pseudoarray image coordinates close to spot being requested
   * @param ms sample being tested to which the xy spot applies
   * @return spot genomic data otherwise "" if no actual spot was specified.
   * @see CompositeDatabase#lookupHPcoords
   * @see #getSpotGenomicLine
   */
  String getSpotGenomicData(Point xy, MaHybridSample ms)
  { /* getSpotGenomicData*/
    String sf= "";
    
    if(!cdb.isValidObjFlag)
      return("");
    
    String maCoords= cdb.lookupHPcoords(xy.x,xy.y, mae.spotRad, false,ms);
    sf= getSpotGenomicLine(cdb.objGID);
    
    return(sf);
  } /* getSpotGenomicData*/
  
  
  /**
   * getPlate(gid) - return the Plate coords Grid[r,c] as B3,4 etc.
   * @param gid is the grid index
   * @return plate name otherwise "" if no actual spot was specified.
   */
  String getPlate(int gid)
  { /* getPlate */
    String sR= "";
    Gene gene= ((gid==-1) ? (Gene)null : map.gidStaticCL.mList[gid]);
    
    if(gene!=null & plate!=null)
    { /* get from geone */
      plate= gene.plate;
      plate_row= gene.plate_row;
      plate_col= gene.plate_col;
      sR= " plate[" + plate +"," + plate_row + "," + plate_col + "]";
    }
    
    return(sR);
  } /* getPlate */
  
  
  /**
   * setGenomicData() - get genomic data from GID gene into local variables of spotFeatures.
   * @param gid is the Grid Index (GID) of spot to report
   * @return true if were able to get data
   */
  boolean setGenomicData(int gid)
  { /* setGenomicData */
    Gene gene= ((gid==-1) ? (Gene)null : map.gidStaticCL.mList[gid]);
    
    if(gene!=null)
    { /* get from gene object */
      plate= gene.plate;
      plate_row= gene.plate_row;
      plate_col= gene.plate_col;
      masterID= gene.Master_ID;
      cloneID= gene.Clone_ID;
      Unigene_ID= gene.Unigene_ID;
      dbESTid3= gene.dbEST3;
      dbESTid5= gene.dbEST5;
      GenBankAcc= gene.GenBankAcc;
      GenBankAcc3= gene.GenBankAcc3;
      GenBankAcc5= gene.GenBankAcc5;
      SwissProt= gene.SwissProt;
      geneName= gene.Gene_Name;
      geneClass= gene.Gene_Class;
      UGclusterName= gene.UGclusterName;
      
      switch(mae.masterNameMode)
      {
        case MAExplorer.MASTER_GENE_NAME:
          mae.masterGeneName= "Gene Name";
          break;
        case MAExplorer.MASTER_UG_NAME:
          mae.masterGeneName= "UniGene Cluster Name";
          break;
        default:
          mae.masterGeneName= "Gene Descr.";
          break;
      }
      
      switch(mae.masterIDmode)
      {
        case MAExplorer.MASTER_CLONE_ID:
          mae.masterIDname= "Clone ID";
          break;
        case MAExplorer.MASTER_GENBANK:
          mae.masterIDname= "GenBank";
          break;
        case MAExplorer.MASTER_GENBANK5:
          mae.masterIDname= "GenBank 5'";
          break;
        case MAExplorer.MASTER_GENBANK3:
          mae.masterIDname= "GenBank 3'";
          break;
        case MAExplorer.MASTER_UG_ID:
          mae.masterIDname= "UniGene Cluster ID";
          break;
        case MAExplorer.MASTER_LOCUSLINK:
          mae.masterIDname= "LocusID";
          break;
        default:
          mae.masterIDname= "ID Descr.";
          break;
      }
      
      return(true);
    } /* get from  gene object */
    
    if(gene==null || (gene.properties & Gene.C_BAD_SPOT)!=0)     
    { /* no data */
      plate= "-";
      plate_row= "-";
      plate_col= "-";
      masterID= "-";
      cloneID= "-";
      Unigene_ID= "-";
      dbESTid3= "-";
      dbESTid5= "-";
      GenBankAcc= "-";
      GenBankAcc3= "-";
      GenBankAcc5= "-";
      SwissProt= "-";
      UGclusterName= "-";
      geneName= "-";
      geneClass= "-";
      return(false);
    }
    
    return(false);
  } /*setGenomicData */
  
  
  /**
   * showValidSpotInfo() - show spot gene info if valid obj else no-op
   * @param xyObj is the pseudoarray image coordinates close to spot being requested
   * @param ms sample being tested to which the xyObj spot applies
   * @see Util#showFeatures
   * @see Util#showMsg
   * @see #getXYG
   * @see #getSpotFeatures
   * @see #getSpotGenomicData
   */
  void showValidSpotInfo(Point xyObj, MaHybridSample ms)
  { /* showValidSpotInfo */
    if(ms==null || !cdb.isValidObjFlag)
      return;
    
    xygStr= getXYG(xyObj, ms);
    featuresStr= getSpotFeatures(xyObj,ms);
    genomicDataStr= getSpotGenomicData(xyObj, ms);
    
    Util.showMsg(xygStr);
    Util.showFeatures(featuresStr, genomicDataStr);
  } /* showValidSpotInfo */
  
  
  /**
   * getCurGeneXYGdata() - get spot quantitation summary of current gene.
   * The format depends on the normalization, single or multiple X, Y sets
   * pseudoarray image mode, etc. See the Reference manual.
   * @return string report if current gene (spot) defined else ""
   * @see #getXYG
   **/
  static String getCurGeneXYGdata()
  { /* getCurGeneXYGdata */
    String xygStr= (!cdb.isValidObjFlag)
                      ? ""
                      : mae.sf.getXYG(mae.is.siCanvas.xyObj, mae.ms);
    return(xygStr);
  } /* getCurGeneXYGdata */
  
  
  /**
   * getCurGeneFeaturedata() - get spot feature summary of current gene.
   * The format depends on GIPO and other data available for the gene.
   * See the Reference Manual for examples.
   * @return string report if valid spot else ""
   * @see #getSpotFeatures
   */
  static String getCurGeneFeaturedata()
  { /* getCurGeneFeaturedata */
    String featuresStr= (!cdb.isValidObjFlag)
                           ? ""
                           : mae.sf.getSpotFeatures(mae.is.siCanvas.xyObj,
                                                    mae.ms);
    return(featuresStr);
  } /* getCurGeneFeaturedata */
  
  
  /**
   * getCurGeneGenomicdata() - get spot feature summary of current gene.
   * The format depends on GIPO and other data available for the gene.
   * See the Reference Manual for examples.
   * @return string report if valid spot else ""
   * @see #getSpotGenomicData
   */
  static String getCurGeneGenomicdata()
  { /* getCurGeneGenomicdata */
    String genomicDataStr= (!cdb.isValidObjFlag)
                             ? ""
                             : mae.sf.getSpotGenomicData(mae.is.siCanvas.xyObj,
                                                         mae.ms);
    return(genomicDataStr);
  } /* getCurGeneGenomicdata */
  
  
} /* end of class SpotFeatures */
